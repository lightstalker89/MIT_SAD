<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0068)http://codefez.com/test-your-dotnet-gui-with-nunit-and-mock-objects/ -->
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<title>Test Your DotNet GUI with NUnit and Mock Objects | CodeFez</title>

<meta name="robots" content="all">
<meta name="generator" content="WordPress 3.2.1">
<link rel="Shortcut Icon" href="http://codefez.com/wp-content/themes/indomagz_2/images/favicon.gif" type="image/x-icon">
<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://codefez.com/feed/">
<link rel="alternate" type="text/xml" title="RSS .92" href="http://codefez.com/feed/rss/">
<link rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://codefez.com/feed/atom/">
<link rel="pingback" href="http://codefez.com/xmlrpc.php">

<link rel="stylesheet" href="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/style.css" type="text/css" media="all">

<!--[if lt IE 6]>
<link rel="stylesheet" href="http://codefez.com/wp-content/themes/indomagz_2/style-ie5fix.css" type="text/css" media="all" />
<![endif]-->

	<link rel="archives" title="December 2010" href="http://codefez.com/2010/12/">
	<link rel="archives" title="December 2009" href="http://codefez.com/2009/12/">
	<link rel="archives" title="November 2009" href="http://codefez.com/2009/11/">
	<link rel="archives" title="October 2009" href="http://codefez.com/2009/10/">
	<link rel="archives" title="September 2009" href="http://codefez.com/2009/09/">
	<link rel="archives" title="August 2009" href="http://codefez.com/2009/08/">
	<link rel="archives" title="July 2009" href="http://codefez.com/2009/07/">
	<link rel="archives" title="June 2009" href="http://codefez.com/2009/06/">
	<link rel="archives" title="May 2009" href="http://codefez.com/2009/05/">
	<link rel="archives" title="April 2009" href="http://codefez.com/2009/04/">
	<link rel="archives" title="March 2009" href="http://codefez.com/2009/03/">
	<link rel="archives" title="February 2009" href="http://codefez.com/2009/02/">
	<link rel="archives" title="January 2009" href="http://codefez.com/2009/01/">
	<link rel="archives" title="November 2008" href="http://codefez.com/2008/11/">
	<link rel="archives" title="October 2008" href="http://codefez.com/2008/10/">
	<link rel="archives" title="September 2008" href="http://codefez.com/2008/09/">
	<link rel="archives" title="August 2008" href="http://codefez.com/2008/08/">
	<link rel="archives" title="July 2008" href="http://codefez.com/2008/07/">
	<link rel="archives" title="June 2008" href="http://codefez.com/2008/06/">
	<link rel="archives" title="May 2008" href="http://codefez.com/2008/05/">
	<link rel="archives" title="April 2008" href="http://codefez.com/2008/04/">
	<link rel="archives" title="March 2008" href="http://codefez.com/2008/03/">
	<link rel="archives" title="February 2008" href="http://codefez.com/2008/02/">
	<link rel="archives" title="January 2008" href="http://codefez.com/2008/01/">
	<link rel="archives" title="December 2007" href="http://codefez.com/2007/12/">
	<link rel="archives" title="November 2007" href="http://codefez.com/2007/11/">
	<link rel="archives" title="October 2007" href="http://codefez.com/2007/10/">
	<link rel="archives" title="September 2007" href="http://codefez.com/2007/09/">
	<link rel="archives" title="August 2007" href="http://codefez.com/2007/08/">
	<link rel="archives" title="July 2007" href="http://codefez.com/2007/07/">
	<link rel="archives" title="June 2007" href="http://codefez.com/2007/06/">
	<link rel="archives" title="May 2007" href="http://codefez.com/2007/05/">
	<link rel="archives" title="April 2007" href="http://codefez.com/2007/04/">
	<link rel="archives" title="March 2007" href="http://codefez.com/2007/03/">
	<link rel="archives" title="February 2007" href="http://codefez.com/2007/02/">
	<link rel="archives" title="January 2007" href="http://codefez.com/2007/01/">
	<link rel="archives" title="December 2006" href="http://codefez.com/2006/12/">
	<link rel="archives" title="November 2006" href="http://codefez.com/2006/11/">
	<link rel="archives" title="October 2006" href="http://codefez.com/2006/10/">
	<link rel="archives" title="September 2006" href="http://codefez.com/2006/09/">
	<link rel="archives" title="August 2006" href="http://codefez.com/2006/08/">
	<link rel="archives" title="July 2006" href="http://codefez.com/2006/07/">
	<link rel="archives" title="June 2006" href="http://codefez.com/2006/06/">
	<link rel="archives" title="May 2006" href="http://codefez.com/2006/05/">
	<link rel="archives" title="April 2006" href="http://codefez.com/2006/04/">
	<link rel="archives" title="March 2006" href="http://codefez.com/2006/03/">
	<link rel="archives" title="February 2006" href="http://codefez.com/2006/02/">
	<link rel="archives" title="January 2006" href="http://codefez.com/2006/01/">
	<link rel="archives" title="December 2005" href="http://codefez.com/2005/12/">
	<link rel="archives" title="November 2005" href="http://codefez.com/2005/11/">
	<link rel="archives" title="October 2005" href="http://codefez.com/2005/10/">
	<link rel="archives" title="September 2005" href="http://codefez.com/2005/09/">
	<link rel="archives" title="August 2005" href="http://codefez.com/2005/08/">
	<link rel="archives" title="July 2005" href="http://codefez.com/2005/07/">
	<link rel="archives" title="June 2005" href="http://codefez.com/2005/06/">
	<link rel="archives" title="May 2005" href="http://codefez.com/2005/05/">
	<link rel="archives" title="April 2005" href="http://codefez.com/2005/04/">
	<link rel="archives" title="March 2005" href="http://codefez.com/2005/03/">
	<link rel="archives" title="February 2005" href="http://codefez.com/2005/02/">
	<link rel="archives" title="January 2005" href="http://codefez.com/2005/01/">
	<link rel="archives" title="December 2004" href="http://codefez.com/2004/12/">
	<link rel="archives" title="November 2004" href="http://codefez.com/2004/11/">
<link rel="alternate" type="application/rss+xml" title="CodeFez Â» Test Your DotNet GUI with NUnit and Mock Objects Comments Feed" href="http://codefez.com/test-your-dotnet-gui-with-nunit-and-mock-objects/feed/">
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://codefez.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://codefez.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="CodeFez" href="http://codefez.com/">
<link rel="start" title="Review of Firefox 1.0" href="http://codefez.com/review-of-firefox-10/">
<link rel="prev" title="Globalization: Fiddling While Rome Burns" href="http://codefez.com/globalization-fiddling-while-rome-burns/">
<link rel="next" title="Building C# Projects with NAnt" href="http://codefez.com/building-c-projects-with-nant/">
<meta name="generator" content="WordPress 3.2.1">
<link rel="canonical" href="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/Test Your DotNet GUI with NUnit and Mock Objects   CodeFez.htm">
<link rel="shortlink" href="http://codefez.com/?p=128">

<!-- all in one seo pack 1.4.6.15 [307,376] -->
<meta name="description" content="Unit testing is an easy technology to learn, but very difficult to master. In particular, problems often occur when developers try to start testing user">
<!-- /all in one seo pack -->

<!-- Start Of Script Generated By WP-PageNavi 2.31 -->
<link rel="stylesheet" href="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/pagenavi-css.css" type="text/css" media="screen">
<!-- End Of Script Generated By WP-PageNavi 2.31 -->

<script type="text/javascript"><!--//--><![CDATA[//><!--
sfHover = function() {
	if (!document.getElementsByTagName) return false;
	var sfEls = document.getElementById("nav").getElementsByTagName("li");

	for (var i=0; i<sfEls.length; i++) {
		sfEls[i].onmouseover=function() {
			this.className+=" sfhover";
		}
		sfEls[i].onmouseout=function() {
			this.className=this.className.replace(new RegExp(" sfhover\\b"), "");
		}
	}
}
if (window.attachEvent) window.attachEvent("onload", sfHover);
//--><!]]></script><style type="text/css"></style>

<meta name="verify-v1" content="b6s90XeI1838NV7uu/wo0XHRXdATJcqB1jKm9pKIeN0=">
</head>

<body>
<div id="page">

<div id="header">
	<div id="headerleft">
		<h1><a href="http://codefez.com/">CodeFez</a></h1>
		<p class="description">Software Development, Project Management, Opinions, Technical Articles</p>	
	</div>
	<div id="headerright">
		<form id="searchformtop" method="get" action="">
		<input value="Search..." name="s" id="stop" onfocus="if (this.value == &#39;Search...&#39;) {this.value = &#39;&#39;;}" onblur="if (this.value == &#39;&#39;) {this.value = &#39;Search...&#39;;}" type="text">
		<input id="sbutttop" value="GO" type="submit"></form>
		<div class="rsswidget">
		<span class="rss"><a href="http://codefez.com/comments/feed/">Comments</a></span>
		<span class="rss"><a href="http://codefez.com/feed/">Entries</a></span>
		</div>

	</div>
</div>

<div id="headerimg">
<a href="http://codefez.com/"></a>
</div>

<div id="navbar">
	<div id="navbarleft">
		<ul id="nav">
			<li><a href="http://codefez.com/">Home</a></li>
			<li class="page_item page-item-2"><a href="http://codefez.com/about/" title="About">About</a></li>
		</ul>
	</div>
	<div id="navbarright">	
	</div>
</div>

<div id="content-wrapper">

  <div id="content">

	
						<div class="post" id="post-128">
				<h1><a href="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/Test Your DotNet GUI with NUnit and Mock Objects   CodeFez.htm" rel="bookmark" title="Permanent Link to Test Your DotNet GUI with NUnit and Mock Objects">Test Your DotNet GUI with NUnit and Mock Objects</a></h1>
				<div class="entry">
					<p>Unit testing is an easy technology to learn, but very difficult to master. In particular, problems often occur when developers try to start testing user interfaces, modules that are not complete yet, database code, or code that depends on network interactions. There are various ways to solve these kinds of problems, but one of the most interesting involves the use of mock objects.</p>
<p>This article provides a brief introduction to the syntax and basic principles of mock objects. Anyone who is already familiar with the basic principles of unit testing should be able to follow this article with no difficulty. This article differs from most of the other introductions to mock objects found on the web in that it goes beyond showing you the simple syntax for using mock objects and focuses on introducing the rationale behind this school of programming. Other articles found on the web show you how to write the syntax for creating mock objects, but donât explain why you are creating them and what kinds of problems they solve. This article attempts to flesh out this subject matter by discussing more than the basic syntax, and hence giving you a start on understand how and when to correctly design applications that can be tested with mock objects. </p>
<p>The theory behind mock objects is a relatively deep subject that can be discussed at considerable length. However, one needs a place to start an in depth discussion, and the goal of this article is to give you a basic understanding of the technology so that we can examine it in more depth at a later date. In particular, this article demonstrates how to use mock objects to test code that has heavy dependencies on a graphical user interface element. </p>
<p>This article does not enter into advanced discussions of mock theory, test isolation, interaction tests, state tests, and mock objects vs stubs. That type of subject matter will be addressed in additional articles to be written at a later date. When reading about these advanced matters, you will retroactively see why starting out by learning how to mock up graphical objects is a good idea. You will also find that mock objects are great tool for writing stubs. </p>
<p>NOTE: In this article I will show how to use the lightweight implementation of mock objects that is built into NUnit. I chose to do this because NUnit is widely distributed, widely understood, and easy to use. If you read this article, and think that you want to use mock objects in your own code, you might consider using NMock, DotNetMock, EasyMock.NET, NCover or a commercial mock object implementation such as TypeMock. I believe, however, that you would be wise to start out learning about mock objects using the NUnit code shown here, and then apply that knowledge to more advanced tools once you understand the basics. There is nothing wrong with the lightweight mock object framework provided with NUnit, and if it suits your needs, then you can safely use it for all your testing. </p>
<p>The article begins with an explanation of what mock objects are and presents a simple example of one kind of problem they are designed to solve. Then you will see how to handle the simple syntax involved with creating a mock object using NUnit. If you donât want to read some useful and easy to understand theory about how mock objects work, then you can skip right to the sections on understanding the syntax and implementing mock objects. The two key code samples are Listing 1 and especially Listing 2. </p>
<h4><a name="overview"></a>Introduction to Mock Objects </h4>
<p>You will never be able to unit test your code unless you design it properly. The key to creating code that can be unit tested is to ensure that you engage in loose coupling. Loosely coupled code is code that can be easily decomposed into discreet objects or packages/assemblies. If your code is all bunched together into one monolithic ball and you canât initialize one section of it in isolation from the rest, then your code is not loosely coupled. Code that is not loosely coupled is difficult to test </p>
<p>When creating loosely coupled code, usually it is helpful to provide interfaces for the key objects in your program. The ideal is to have loosely coupled objects that can be initialized in isolation from one another, and that can be accessed through interfaces. Loosely coupled code of this type is both easy to maintain and easy to test. </p>
<p>Loosely coupling your code is particularly important when it comes to working with hard to test areas such as interfaces and databases. Be sure that you create code that gets input from the user in one class, and code that performs operations on that data in a second class. A quick metric to use when designing classes of this type runs as follows: <em>Be sure that each class you create performs one, and only one, major task.</em></p>
<h5><a name="gui"></a>Working with GUI Interfaces </h5>
<p>It helps to look at a specific example when thinking about what it mean to perform one and only one major task in a class. At the same time, we will see how to separate easily testable code from difficult to test graphical user interface code. </p>
<p>Most dialogs have a button labeled <strong>OK</strong> that the user presses after the user has entered data. To properly unit test your code, you need to make sure that data is transferred from the dialog class that contains the <strong>OK</strong> button to a separate class the holds the data. This ensures that your user interface supports only the task of getting data from the user, and does not also try to store that data or perform operations on that data. It is this second class that will prove to be easy to test. </p>
<p>NOTE: It is important to properly separate the task of getting the input from the user from the task of performing operations on that input. For instance, if you have code that ensures that a user can only enter digits in an input box, then that code belongs with the input dialog; it is part of getting input from the user. If however, you want to store that data in a database, or if you want to perform a mathematical calculation on that data, then you want to move such code out of the input dialog before attempting to store it in the database, and before you perform calculations on it. </p>
<p>Most people who write code of this type without planning ahead will create a dialog that mixes the tasks of receiving input from the user with the task of performing operations on that data. By doing so the commit two errors: </p>
<ol>
<li>The have one class perform two major tasks. </li>
<li>The put code that needs to be tested inside a GUI interface class that is hard to test. </li>
</ol>
<p>Our natural instincts lead us astray when we write this type of code. It takes a conscious effort to begin to properly design applications that have a user interface. </p>
<p>The objection to the idea of separating data operations from user input operations is that it requires writing additional code. Instead of writing just one class, you now have to write two classes: one class for the input dialog, and one for holding the data and performing operations on it. Some developers object that writing the additional code takes more time, and it ends up bloating the code base for a program. The reposte is simply that one needs to choose: do you want to write less code or do you want to write code that is easy to test and maintain? My personal experience has shown that it is better to have code that is easy to test and maintain.</p>
<p>NOTE: Just to be absolutely clear: The primary reason to split up your code into two classes is to make it easy to maintain. The additional benefit of making the code easy to test simply falls out naturally from that initial decision to support a good architecture. I should add that you usually donât need to unit test the graphical user interface itself. The people who created your GUI components did that for you. When was the last time you had a input box malfunction on you? It just doesnât happen. The code we need to test is the code that performs operations on our data, not the code that gets the data from the user. </p>
<h5><a name="enterMock"></a>Enter the Mock Object</h5>
<p>If you have decided to properly decompose your code into separate classes for the GUI and for containing your data, then the next question is how one goes about testing such code. After all, the code that contains your data still needs a way to obtain input. Something has to feed it data. In a testing scenario, if you decide to get input for the data class from the interface module, then you are no better off than before you decomposed your code. The dialog is still part of your code, and so you are still stuck with the difficulty of automating a process that involves getting input from the user. To state the matter somewhat differently, what is the point of promoting loose coupling if you donât ever decouple your code?</p>
<p>The solution to this dilemma is to allow something called a mock object to stand in for your input dialog class. Instead of getting data from the user via the input dialog, instead, you get data from your mock object. </p>
<p>If your code were not loosely coupled, then you could not remove the input dialog from the equation and substitute the mock object for it. In other words, loose coupling is an essential part of both good application design in general, and mock object testing in particular. </p>
<p>At this stage, you have enough background information to understand what mock objects are about, and what kind of problem they can solve. Exactly how the syntax for creating mock objects is implemented is the subject of the remaining sections of this article. </p>
<h4><a name="writeMock"></a>Writing Mock Objects </h4>
<p>Now that you understand the theory behind mock objects, the next step is to learn how to write a mock object. I will first explain how the syntax works, then show how to implement a mock object. </p>
<h5><a name="understand"></a>Understanding the Syntax</h5>
<p>Mock objects are generally built around C# interfaces. (Iâm now talking about the C# syntactical element called an interface; Iâm not talking about graphical user <em>interfaces</em>.) In general, you want to create an interface which fronts for the object that you want to mock up.</p>
<p>Consider the case of the input dialog we have been discussing in this article. You will want to create an interface that can encapsulate, as it were, the functionality of that input dialog. The point here is that it is awkward to try to use NUnit to test dialogs of this type, so we are creating a mock object as a substitute for this dialog. As you will see later in this article, creating the interface is a key step in the process of developing our mock object. </p>
<p>Suppose you have an input dialog&nbsp; that gets the userâs name and his or her age. You need to create an interface that would encapsulate this entire class. </p>
<p>&nbsp;</p>
<p> The input dialog that we want to mock up with our mock object. </p>
<p>Here is an interface that can capture the information from this dialog:</p>
<pre>public interface IPerson{	string UserName { get; }	int Age { get; }} </pre>
<p>The InputDialog should implement this interface:</p>
<pre>	public class InputDialog : System.Windows.Forms.Form, <strong>IPerson</strong>	{		private int age;		private String name;
		public int Age		{			get { return age; }			set { age = value; }		}
		public String UserName		{			get { return name; }			set { name = value; }		}</pre>
<p>Note in particular that <strong>InputDialog </strong>descends from <strong>System.Windows.Forms.Form, </strong>but it implements <strong>IPerson. </strong>The complete source for this class can be found here.</p>
<p>The class that will contain and perform operations on the data from the <strong>InputDialog</strong> will consume instances of <strong>IPerson. </strong>The full source code for this class, called <strong>PersonContainer</strong>, will be shown and discussed later in this article. </p>
<pre>	public class PersonContainer	{		<strong>IPerson</strong> person;

		public PersonContainer(<strong>IPerson </strong>person)		{			this.person = person;		}</pre>
<p>Now you can create an instance of your dialog and pass it to your data container after the user inputs data:</p>
<pre>	private void button1_Click(object sender, System.EventArgs e)	{		InputDialog <strong>inputDialog</strong> = new InputDialog();		<strong>inputDialog</strong>.ShowDialog(this);		PersonContainer personContainer =
		  new PersonContainer(<strong>inputDialog</strong>);	}</pre>
<p>If you are not used to working with interfaces, please examine this code carefully. The variable <strong>inputDialog</strong> is of type <strong>InputDialog</strong>. Yet notice that we pass it to the constructor for <strong>PersonContainer</strong>, which expects variables of type <strong>IPerson:</strong></p>
<pre>public PersonContainer(<strong>IPerson </strong>person)</pre>
<p>This works because <strong>InputDialog</strong> supports the <strong>IPerson </strong>interface. You can see this by looking at the declaration from for <strong>InputDialog</strong>:</p>
<pre>public class <strong>InputDialog</strong> : System.Windows.Forms.Form, <strong>IPerson</strong></pre>
<p>The key point to grasp here is that the constructor for <strong>PersonContainer</strong> doesnât care whether the variable passed to it is of type <strong>InputDialog</strong> or of type <strong>FooBar</strong>, so long as the class supports the <strong>IPerson </strong>interface. In other words, if you can get it to support the <strong>IPerson</strong> interface, then you can pass in a variable of almost any type into <strong>PersonContainerâs</strong> constructor.</p>
<p>By now, the lights should be going on in your head. In our production program, we are going to pass in variables of type <strong>InputDialog</strong> to <strong>PersonContainer</strong>. But during testing, we donât want to pass in <strong>InputDialog</strong>s, because they are graphical user interface elements, and are hard to test. So instead, we want to create a <em>mock</em> object that supports the <strong>IPerson</strong> interface and then pass it in to <strong>PersonContainer.</strong> Exactly how that is done is the subject of the next two sections of this text.</p>
<h5><a name="implementData"></a>Implementing the Data Object</h5>
<p>Before we create the mock object, we need to see the data object. This is the object that will consume both the <strong>InputDialog</strong>, and the mock object. In other words, this is the object that we want to test.</p>
<p>It is usually best to put code like this into a separate assembly. Again, we do this because we want to support loose coupling. You want your primary project to contain your main form, and the <strong>InputDialog</strong> and <strong>PersonContainer</strong> reside in a separate assembly.</p>
<p>NOTE: Right now, you can see more clearly than ever just why so many people do not adopt unit testing, or fail when they attempt to adopt it. We all talk about getting the architecture for our applications right, but in practice we donât always follow the best practices. Instead, we take short cuts, falsely believing that they will "save time." </p>
<p>the structure for your project as it appears in the Solution Explorer. Notice that the main program contains a form called <strong>MainForm.cs</strong>, which in turn calls into <strong>InputDialog</strong> and <strong>PersonContainer</strong>. These latter object are both stored in a separate assembly called <strong>LibraryToTest</strong>. </p>
<p>&nbsp;</p>
<p>The structure of the project after it has been properly designed to contain a main program and a supporting library. The code that we want to test resides in its own library where it is easy to use. </p>
<p>Notice the references section in the library contains <strong>System.Drawing</strong> and <strong>System.Windows.Forms</strong>. I had to explicitly add these, as they were not included by default. To add a reference, right click on the References node in the Solution Explorer and bring up the Add References dialog. Add the two libraries. </p>
<p>&nbsp;</p>
<p>Choose Project | Add Reference to bring up this dialog. Double click on items in top of the dialog to move them down to the Selected Components section at the bottom of the dialog.</p>
<p>Listing 1 shows a simple object called <strong>PersonContainer</strong> that could consume objects such as <strong>InputDialog</strong> that support the <strong>IPerson </strong>interface. Notice that I store both the interface and the data container in this one file.</p>
<p><a name="listing1"></a>Listing 1: The source code for the class that you want to test. It consumes objects that support the <strong>IPerson</strong> interface. </p>
<pre>using System;

namespace CharlieMockLib
{
    public interface IPerson
    {
        string UserName { get; }
        int Age { get; }
    }

    public class PersonContainer
    {
        IPerson person;

        public PersonContainer(IPerson person)
        {
            this.person = person;
        }

        public String SayHello()
        {
            return "Hello " + person.UserName;
        }

        public String DescribeAge()
        {
            return person.UserName + " is " + person.Age + " years old.";
        }

    }
}</pre>
<p>Be sure you understand what you are looking at when you view the code shown in listing 1. This is code that we want to test. The most important point is that in your main program it will have a dependency on a GUI interface element which in this case is called <strong>InputDialog. </strong>It is hard to unit test a GUI element such as a dialog, so we are working around that problem by creating a mock object and passing it instead of the<strong> InputDialog</strong>. To make this possible, we have defined an interface called <strong>IPerson</strong> which is supported by both <strong>InputDialog</strong> and our mock object.</p>
<p>NOTE: From here on out, you need to have <a href="http://web.archive.org/web/20051229002511/http://www.nunit.com/">NUnit</a> installed on your system in order to follow the code examples. NUnit is a free open source project. </p>
<h5><a name="implementMock"></a>Implementing the Mock Object </h5>
<p>From the discussion in the previous sections, you can surmise that it would not be difficult to manually create a class that supports <strong>IPerson</strong> and would therefore act as a mock object that you can pass in to your data container. Though not difficult intellectually, performing tasks of this type can become a monotonous exercise. What the NUnit mock object classes do for you, however, is to make it easy for you to create a mock object. The take the pain out of the process. </p>
<p>By now, you are anxious to see the mock object itself. Begin by creating a new class library and adding it to the solution that you want to test. Add the <strong>nunit.framework</strong> and <strong>nunit.mocks</strong> to the references section of your class library. If these two items do not appear in the <strong>Add Reference</strong> dialog, then you need to press the Browse button, and browse to the place where you installed <strong>nunit.</strong> You will find <strong>nunit.framework.dll</strong> and <strong>nunit.mocks.dll</strong> in the nunit bin directory. </p>
<p>&nbsp;</p>
<p>Adding the references to nuit.framework and nunit.mocks to your project. You can reach this dialog right clicking on the references section shown in Figure 05.</p>
<p>After you have added these two assemblies to your project, you should see them in Solution Explorer. </p>
<p>&nbsp;</p>
<p>Viewing the references sections of your project in the Solution Explorer. Note that you can see both <strong>nunit.framework</strong> and <strong>nunit.mocks</strong>. </p>
<p>Now that you have added the libraries necessary to support NUnit, you are ready to write the code for creating a mock object. After all this build up, you might expect this code to be fairly trick. In fact, you will find that it is quite straightforward, as you can see in Listing 2.</p>
<p><a name="listing2"></a>Listing 2: The code for the mock object. </p>
<pre>using System;

namespace MockObjectTest
{
    using System;

    namespace NUnitMockTest
    {
        using NUnit.Framework;
        using CharlieMockLib;
        using NUnit.Mocks;

        [TestFixture]
        public class NUnitMockTest
        {
            private const String TEST_NAME = "John Doe";

            public NUnitMockTest()
            {
            }

			  [Test]
			  public void TestPersonAge()
            {
                DynamicMock personMock = new DynamicMock(typeof(IPerson));
                PersonContainer personContainer =
                    new PersonContainer((IPerson)personMock.MockInstance);

                personMock.ExpectAndReturn("get_UserName", TEST_NAME);
                personMock.ExpectAndReturn("get_Age", 5);            

                Assert.AreEqual("John Doe is 5 years old.",
					personContainer.DescribeAge());
                personMock.Verify();
            }
        }
    }
}</pre>
<p>The code uses <strong>nunit.framework</strong> and <strong>nunit.mocks</strong>: It also depends on <strong>CharlieMockLib</strong>, which is the namespace in which the <strong>PersonContainer</strong> shown in Listing 1 resides:</p>
<pre>using NUnit.Framework;
using CharlieMockLib;
using NUnit.Mocks;  </pre>
<p>You can see that the <strong>[TestFixture]</strong> and <strong>[Test]</strong> attributes are added to our code, just as they would be in any unit test. </p>
<p>The first, and most important, step in creating a mock object is to create an instance of the <strong>DynamicMock</strong> class. The NUnit <strong>DynamicMock</strong> class is a helper object that provides an easy way for us to "mock" up an implementation of the <strong>IPerson</strong> Interface. Here is an example of how to construct an instance of this class: </p>
<p>DynamicMock personMock = new DynamicMock(typeof(IPerson));</p>
<p>Notice that we pass in the type of the <strong>IPerson</strong> interface. We are asking the NUnit mock object implementation to create an object for us that will automatically and dynamically support the <strong>IPerson</strong> interface. </p>
<p>The next step is to retrieve an instance of our mock object from its factory and pass it in to the PersonContainer:</p>
<pre>IPerson iPerson = (IPerson)personMock.MockInstance
PersonContainer personContainer = new PersonContainer(iPerson);</pre>
<p>If you want, you can save a little typing by doing this all on one line: </p>
<pre>PersonContainer personContainer =
  new PersonContainer((IPerson)personMock.MockInstance);</pre>
<p>Now we need to initialize the values for the two properties on the IPerson interface we have created:</p>
<pre>private const String TEST_NAME = "John Doe";

personMock.ExpectAndReturn("get_UserName", TEST_NAME);
personMock.ExpectAndReturn("get_Age", 5);</pre>
<p>Calls to <strong>ExpectAndReturn</strong> inform our mock object of the properties that we plan to call, and the values that we want our mock object to return. The first parameter in the first call informs our mock object that we plan to call the <strong>UserName</strong> property exactly once, and that we expect it to return the value <strong>John Doe</strong>. The second call to <strong>ExpectAndReturn </strong>does the same type of thing for the <strong>Age </strong>property. In terms of our whole project, you can think of these two lines as saying: "Pretend that the user popped up the <strong>InputDialog</strong> and entered the value <strong>John Doe</strong> for the user name, and the value <strong>5</strong> for the age." Of course, the input dialog is never used. </p>
<p>NOTE: I find it peculiar that NUnit wants us to pass in <strong>get_</strong> prefixed to the name of properties that we want to call. Other implementations of mock objects do not require that you prefix<strong>get_</strong> before calling a property. </p>
<p>The final step in this process is to run our actual test to see if our container properly handles input from our mocked up instance of InputDialog:</p>
<pre>Assert.AreEqual("John Doe is 5 years old.", personContainer.DescribeAge());
personMock.Verify();</pre>
<p>As you can see, the <strong>PersonContainer </strong>calls each of these properties exactly one time:</p>
<pre>public String DescribeAge()
{
  return person.UserName + " is " + person.Age + " years old.";
}</pre>
<p>The call to <strong>Verify</strong> will fail if the <strong>UserName</strong> or <strong>Age</strong> properties are called more than once. This can happen if there is an error in your code, or if you view one of the properties in the watch window of your debugger. </p>
<h4><a name="summary"></a>Summary</h4>
<p>This article gave a (warning: oxymoron ahead) detailed overview of how to use mock objects. The majority of the article was dedicated to explaining why you would want to use mock objects, and in explaining how they can be used to solve a particular type of problem. The actual implementation of a mock object took up less than half of this article. </p>
<p>I should point out three important facts:</p>
<ol>
<li>Mock objects are not designed solely for solving the problem of testing the graphical user interface for an application. They are also used for mocking up database access, network access, or incomplete parts of large projects. Many developers, particularly in the XP tradition, use mock objects for all the secondary layers in their application. In other words, whenever one object in a program depends on another object from your program, then these hardcore mockers use mock objects. </li>
<li>The NUnit mock objects are not the only solution for testing a graphical user interface. In particular, there are commercial products such as TypeMock that offer advanced facilities and greater ease of use. Furthermore, various tools, including TestComplete, (a company in which Falafel is a part owner), can also be used for testing user interfaces. Many of these commercial testing tools provide shortcuts that may be easier to use than the process shown here. </li>
<li>As mentioned earlier in this article, the NUnit implementation of mock objects is lightweight. In particular, the release notes for NUnit state: "This facility is in no way a replacement for full-fledged mock frameworks such as NMock and is not expected to add significant features in upcoming releases. Its primary purpose is to support NUnitâs own tests. We wanted to do that without the need to choose a particular mock framework and without having to deal with versioning issues outside of NUnit itself." I feel compelled to add, however, that if the NUnit mock objects shown in this article meet your needs, there is no reason for you to upgrade to another tool. </li>
</ol>
<p>Mock objects can play a very important role in unit tests. Hopefully this brief introduction to the topic should give you the information you need to use them in your own testing process.</p>
				</div>
				<div style="clear:both;"></div>
				<div class="postmeta">
					<span class="post-author">admin</span>
					<span class="post-calendar">2 March 2009</span>
					<span class="post-category"><a href="http://codefez.com/category/programming-languages/" title="View all posts in Programming Languages" rel="category tag">Programming Languages</a>, <a href="http://codefez.com/category/software-development/" title="View all posts in Software Development" rel="category tag">Software Development</a></span>
											 
														</div>
			</div>

			<div class="post-nav">
				<span class="previous"><a href="http://codefez.com/globalization-fiddling-while-rome-burns/" rel="prev">Globalization: Fiddling While Rome Burns</a></span>
				<span class="next"><a href="http://codefez.com/building-c-projects-with-nant/" rel="next">Building C# Projects with NAnt</a></span>
				<div style="clear:both;"></div>
			</div>

			
<div id="commentbox">	

<!-- You can start editing here. -->


			<!-- If comments are open, but there are no comments. -->
		<h3 id="comments">No comments yet</h3>

	 


<h3 id="respond">Leave a Reply</h3>

<p>You must be <a href="http://codefez.com/wp-login.php?redirect_to=http%3A%2F%2Fcodefez.com%2Ftest-your-dotnet-gui-with-nunit-and-mock-objects%2F">logged in</a> to post a comment.</p>



				
</div>	


		
	
  </div><!--/content -->

  <div id="sidebar-wrapper">

		<div class="sidebartop">
			<h3>Subscribe</h3>
			<p>Sign up to receive the latest news!</p>
			<form id="subscribeform" action="http://www.feedburner.com/fb/a/emailverify" method="post" target="popupwindow" onsubmit="window.open(&#39;http://www.feedburner.com/fb/a/emailverifySubmit?feedId=YOURFEEDBURNERFFID&#39;, &#39;popupwindow&#39;, &#39;scrollbars=yes,width=550,height=520&#39;);return true"><p><input type="text" value="Enter your email address..." id="s2" onfocus="if (this.value == &#39;Enter your email address...&#39;) {this.value = &#39;&#39;;}" onblur="if (this.value == &#39;&#39;) {this.value = &#39;Enter your email address...&#39;;}" name="email"><input type="hidden" value="http://feeds.feedburner.com/~e?ffid=YOURFEEDBURNERFFID" name="url"><input type="hidden" value="CodeFez" name="title"><input type="submit" value="Subscribe" id="sbutt2"></p></form>
		</div>

		<div class="sidebartop">
			<h3>Advertisements</h3>
			<center>
			<a href=""><img style="margin:5px 10px 5px 0px;" src="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/1.gif" alt="Rome"></a>
			<a href=""><img style="margin:5px 0px 5px 0px;" src="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/2.gif" alt="Paris"></a>
			<a href=""><img style="margin:5px 10px 0px 0px;" src="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/3.gif" alt="Sea"></a>
			<a href=""><img style="margin:5px 0px 0px 0px;" src="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/4.gif" alt="Ornament"></a>
			</center>
		</div>

		<div class="sidebartop">
<center>
<script type="text/javascript"><!--
google_ad_client = "pub-8273889765408332";
/* 234x60, created 7/24/09 */
google_ad_slot = "2860462210";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</center>
		</div>

		
	<div id="sidebar1">
	  <ul>
		
		<li class="widget">
		<h3>Catregories</h3>
			<ul>
					<li class="cat-item cat-item-9"><a href="http://codefez.com/category/hardware/" title="View all posts filed under Hardware">Hardware</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://codefez.com/category/operating-systems/" title="View all posts filed under Operating Systems">Operating Systems</a>
</li>
	<li class="cat-item cat-item-3"><a href="http://codefez.com/category/programming-languages/" title="View all posts filed under Programming Languages">Programming Languages</a>
</li>
	<li class="cat-item cat-item-11"><a href="http://codefez.com/category/project-management/" title="View all posts filed under Project Management">Project Management</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://codefez.com/category/project-planning/" title="View all posts filed under Project Planning">Project Planning</a>
</li>
	<li class="cat-item cat-item-6"><a href="http://codefez.com/category/project-software/" title="View all posts filed under Project Software">Project Software</a>
</li>
	<li class="cat-item cat-item-10"><a href="http://codefez.com/category/software/" title="View all posts filed under Software">Software</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://codefez.com/category/software-development/" title="View all posts filed under Software Development">Software Development</a>
</li>
	<li class="cat-item cat-item-4"><a href="http://codefez.com/category/source-code/" title="View all posts filed under Source Code">Source Code</a>
</li>
			</ul>
		</li>
		<li class="widget">
	
		<h3>Archives</h3>
			<ul>
					<li><a href="http://codefez.com/2010/12/" title="December 2010">December 2010</a></li>
	<li><a href="http://codefez.com/2009/12/" title="December 2009">December 2009</a></li>
	<li><a href="http://codefez.com/2009/11/" title="November 2009">November 2009</a></li>
	<li><a href="http://codefez.com/2009/10/" title="October 2009">October 2009</a></li>
	<li><a href="http://codefez.com/2009/09/" title="September 2009">September 2009</a></li>
	<li><a href="http://codefez.com/2009/08/" title="August 2009">August 2009</a></li>
	<li><a href="http://codefez.com/2009/07/" title="July 2009">July 2009</a></li>
	<li><a href="http://codefez.com/2009/06/" title="June 2009">June 2009</a></li>
	<li><a href="http://codefez.com/2009/05/" title="May 2009">May 2009</a></li>
	<li><a href="http://codefez.com/2009/04/" title="April 2009">April 2009</a></li>
	<li><a href="http://codefez.com/2009/03/" title="March 2009">March 2009</a></li>
	<li><a href="http://codefez.com/2009/02/" title="February 2009">February 2009</a></li>
	<li><a href="http://codefez.com/2009/01/" title="January 2009">January 2009</a></li>
	<li><a href="http://codefez.com/2008/11/" title="November 2008">November 2008</a></li>
	<li><a href="http://codefez.com/2008/10/" title="October 2008">October 2008</a></li>
	<li><a href="http://codefez.com/2008/09/" title="September 2008">September 2008</a></li>
	<li><a href="http://codefez.com/2008/08/" title="August 2008">August 2008</a></li>
	<li><a href="http://codefez.com/2008/07/" title="July 2008">July 2008</a></li>
	<li><a href="http://codefez.com/2008/06/" title="June 2008">June 2008</a></li>
	<li><a href="http://codefez.com/2008/05/" title="May 2008">May 2008</a></li>
	<li><a href="http://codefez.com/2008/04/" title="April 2008">April 2008</a></li>
	<li><a href="http://codefez.com/2008/03/" title="March 2008">March 2008</a></li>
	<li><a href="http://codefez.com/2008/02/" title="February 2008">February 2008</a></li>
	<li><a href="http://codefez.com/2008/01/" title="January 2008">January 2008</a></li>
	<li><a href="http://codefez.com/2007/12/" title="December 2007">December 2007</a></li>
	<li><a href="http://codefez.com/2007/11/" title="November 2007">November 2007</a></li>
	<li><a href="http://codefez.com/2007/10/" title="October 2007">October 2007</a></li>
	<li><a href="http://codefez.com/2007/09/" title="September 2007">September 2007</a></li>
	<li><a href="http://codefez.com/2007/08/" title="August 2007">August 2007</a></li>
	<li><a href="http://codefez.com/2007/07/" title="July 2007">July 2007</a></li>
	<li><a href="http://codefez.com/2007/06/" title="June 2007">June 2007</a></li>
	<li><a href="http://codefez.com/2007/05/" title="May 2007">May 2007</a></li>
	<li><a href="http://codefez.com/2007/04/" title="April 2007">April 2007</a></li>
	<li><a href="http://codefez.com/2007/03/" title="March 2007">March 2007</a></li>
	<li><a href="http://codefez.com/2007/02/" title="February 2007">February 2007</a></li>
	<li><a href="http://codefez.com/2007/01/" title="January 2007">January 2007</a></li>
	<li><a href="http://codefez.com/2006/12/" title="December 2006">December 2006</a></li>
	<li><a href="http://codefez.com/2006/11/" title="November 2006">November 2006</a></li>
	<li><a href="http://codefez.com/2006/10/" title="October 2006">October 2006</a></li>
	<li><a href="http://codefez.com/2006/09/" title="September 2006">September 2006</a></li>
	<li><a href="http://codefez.com/2006/08/" title="August 2006">August 2006</a></li>
	<li><a href="http://codefez.com/2006/07/" title="July 2006">July 2006</a></li>
	<li><a href="http://codefez.com/2006/06/" title="June 2006">June 2006</a></li>
	<li><a href="http://codefez.com/2006/05/" title="May 2006">May 2006</a></li>
	<li><a href="http://codefez.com/2006/04/" title="April 2006">April 2006</a></li>
	<li><a href="http://codefez.com/2006/03/" title="March 2006">March 2006</a></li>
	<li><a href="http://codefez.com/2006/02/" title="February 2006">February 2006</a></li>
	<li><a href="http://codefez.com/2006/01/" title="January 2006">January 2006</a></li>
	<li><a href="http://codefez.com/2005/12/" title="December 2005">December 2005</a></li>
	<li><a href="http://codefez.com/2005/11/" title="November 2005">November 2005</a></li>
	<li><a href="http://codefez.com/2005/10/" title="October 2005">October 2005</a></li>
	<li><a href="http://codefez.com/2005/09/" title="September 2005">September 2005</a></li>
	<li><a href="http://codefez.com/2005/08/" title="August 2005">August 2005</a></li>
	<li><a href="http://codefez.com/2005/07/" title="July 2005">July 2005</a></li>
	<li><a href="http://codefez.com/2005/06/" title="June 2005">June 2005</a></li>
	<li><a href="http://codefez.com/2005/05/" title="May 2005">May 2005</a></li>
	<li><a href="http://codefez.com/2005/04/" title="April 2005">April 2005</a></li>
	<li><a href="http://codefez.com/2005/03/" title="March 2005">March 2005</a></li>
	<li><a href="http://codefez.com/2005/02/" title="February 2005">February 2005</a></li>
	<li><a href="http://codefez.com/2005/01/" title="January 2005">January 2005</a></li>
	<li><a href="http://codefez.com/2004/12/" title="December 2004">December 2004</a></li>
	<li><a href="http://codefez.com/2004/11/" title="November 2004">November 2004</a></li>
			</ul>
		</li>
		<li class="widget">
	
		<h3>Validation</h3>
  <p>
    <a href="http://validator.w3.org/check?uri=referer"><img src="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/valid-xhtml10-blue" alt="Valid XHTML 1.0 Transitional" height="31" width="88"></a>
</p>
<p>
<a href="http://jigsaw.w3.org/css-validator/">
    <img style="border:0;width:88px;height:31px" src="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/vcss-blue" alt="Valid CSS!">
</a>
</p>
  		</li>
			  </ul>
	</div>

	<div id="sidebar2">
	  <ul>
				<li class="widget">
		<h3>Blogroll</h3>
			<ul>
							</ul>

		</li>
		<li class="widget">
		<h3>Admin</h3>
			<ul>
								<li><a href="http://codefez.com/wp-login.php">Log in</a></li>
				<li><a href="">WordPress</a></li>
								<li><a href="">XHTML</a></li>
			</ul>
		</li>
			  </ul>
	
	</div>

  
  </div>


<div class="clear"></div>

<div id="section-bottom">
	<div class="section4-left separator4">
				<div class="widget">
			<h3>Recent Posts</h3>
	  		<ul class="footer_submenu">
									<li>
			<a href="http://codefez.com/the-top-10-telecommuting-traps/" rel="bookmark" title="Permanent link to The top 10 telecommuting traps">
			The top 10 telecommuting traps			</a>
			</li>
						<li>
			<a href="http://codefez.com/vpns-for-small-businesses/" rel="bookmark" title="Permanent link to VPNs for Small Businesses">
			VPNs for Small Businesses			</a>
			</li>
						<li>
			<a href="http://codefez.com/weaving-the-post-factual-internet/" rel="bookmark" title="Permanent link to Weaving the Post Factual Internet">
			Weaving the Post Factual Internet			</a>
			</li>
						<li>
			<a href="http://codefez.com/the-war-of-the-virtual-bills/" rel="bookmark" title="Permanent link to The War of the Virtual Bills">
			The War of the Virtual Bills			</a>
			</li>
						<li>
			<a href="http://codefez.com/start-your-directx-engines/" rel="bookmark" title="Permanent link to Start Your DirectX Engines">
			Start Your DirectX Engines			</a>
			</li>
									</ul>        
		</div>
			</div>
	<div class="section4-left separator4">
				<div class="widget">
		    			<h3>Recent Comments</h3><ul class="footer_submenu">
	<li><a href="http://codefez.com/two-essay-collections-for-the-price-of-one/#comment-293" title="on Two Essay Collections for the Price of One"><strong>Jim Cooper</strong>: While I don't think LISP is a particularly good example of t...</a></li>
	<li><a href="http://codefez.com/two-essay-collections-for-the-price-of-one/#comment-292" title="on Two Essay Collections for the Price of One"><strong>Virgil  Dupras</strong>: Functional programming is without a doubt a very interesting...</a></li></ul>		</div>
			</div>
	<div class="section4-left">
				<div class="widget">
	    	<h3>Most Viewed</h3>
			<ul class="footer_submenu">
						   <li><a href="http://codefez.com/creating-projects-in-subversion-trunk-tags-branches/" title="Creating Projects in Subversion: Trunk, Tags, Branches">Creating Projects in Subversion: Trunk, Tags, Branches</a> - 65,144 views</li><li><a href="http://codefez.com/fedora-core-3-as-a-multimedia-laptop-os/" title="Fedora Core 3 as a Multimedia Laptop OS">Fedora Core 3 as a Multimedia Laptop OS</a> - 11,804 views</li><li><a href="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/Test Your DotNet GUI with NUnit and Mock Objects   CodeFez.htm" title="Test Your DotNet GUI with NUnit and Mock Objects">Test Your DotNet GUI with NUnit and Mock Objects</a> - 8,600 views</li><li><a href="http://codefez.com/creating-custom-nant-tasks/" title="Creating Custom NAnt Tasks">Creating Custom NAnt Tasks</a> - 8,517 views</li><li><a href="http://codefez.com/gambas-a-fast-visual-basic-for-linux/" title="Gambas: A Fast Visual Basic for Linux">Gambas: A Fast Visual Basic for Linux</a> - 8,060 views</li>						</ul>    
		</div>
			</div>
	<div class="section4-right">
				<div class="widget">
	    	<h3>Most Commented</h3>
			<ul class="footer_submenu">
			 	
				<li><a href="http://codefez.com/two-essay-collections-for-the-price-of-one/" title="Two Essay Collections for the Price of One">Two Essay Collections for the Price of One</a></li>
			  
			</ul>    
		</div>
			</div>
	<div class="clear"></div>
</div>

</div>

<div id="footer">

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="./Test Your DotNet GUI with NUnit and Mock Objects   CodeFez_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-7999134-3");
pageTracker._trackPageview();
} catch(err) {}</script>

		Copyright Â© 2008 <a href="http://codefez.com/">CodeFez</a>. 
	
</div>

</div><!--/page -->


</body></html>