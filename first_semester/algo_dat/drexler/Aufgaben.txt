Beispiel 1a, 1b:
	- Implementiere folgende Klassen:
		* Stack
		* Queue
	- Und demonstriere ihr Verhalten mit jeweils 10 Elementen.
	
Beispiel 1c:
	- Implementiere die rekursive Berechnung der Faktoriellen von n
		* Als Standardrekursion
		* Als Tail Rekursion
	- Implementiere die aufgelöste Version ohne Rekursion
	- 3 Funktionen
	- Unsersuche die Grenzen der Funktionen
		* Wie weit kann jede der Funktionen rechnen?
		
Beispiel 2a:
	- Implementiere folgende Sortierverfahren
		* Selection Sort
		* Bubble Sort
		* Insertion Sort
	- Und untersuche ihr Sortierverhalten bei 100, 1000, 10000 und 100000 Werten
	- Benutze dazu die Timing Klasse
	
Beispiel 2b:
	- Schreibe eine einfache Heap-Implementierung
	- Sortiere 100 integer Werte

Beispiel 3a:
	- Verwende wieder die CArray Klasse für 1000 zufällige Elemente
		* Füge eine neue Variable compCount hinzu
		* Suche nach 10 zufällig bestimmten Werten
			+ Linear (unsortiertes Array)
			+ Binary Search(sortiertes Array)
		* Und gib jeweils die Anzahl der Vergleiche aus
		* Implementiere auch eine Funktion min() und max()

Beispiel 3b:
	- Aus Beispiel 2 wird ein sortiertes Array (absteigend) gewonnen
	- Implementiere eine Fibonacci-Suche in diesem Array und gib für 3 Elemente die Such-Indizes an!
	
Beispiel 4:
	- C# stellt eine Hashtable Klasse zur Verfügung (System.Collections)
	- Schreibe ein Programm, das einen Text einliest und die Wörter
		* in einer Hashtable
		* in einem modifizierten CArray (für Strings)
		
	  einträgt. Untersuche mit der bereits bekannten Timing-Klasse das Suchverhalten für jeweils 20 verschiedene Wörter.
	  
Beispiel 5:
	- Modifiziere die Liste derart, dass eine doppelt verkettete Liste ensteht.
	- Schreibe einen Iterator, der das Durchlaufen der Liste in die verkehrte Richtung gestattet.
	
Beispiel 6:
	- Schreibe einen AVL-Baum Klasse
		* Unittest für 4 Einfüge-Szenarien
		* Ausgabe der Baumstruktur
		* Löschen von Elementen
		
	- Messe Zeit zum Aufbau des Baums und zur Suche von 100 Elementen mit
		* 100 000 Integers in Zufallsfolge
		* 100 000 Integers vorsortiert
		* im AVL-Baum und im Binär-Baum
	
	
	
	
