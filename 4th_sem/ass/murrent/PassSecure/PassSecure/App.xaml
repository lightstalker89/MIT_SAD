<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    x:Class="PassSecure.App"
             StartupUri="Views\MainWindow.xaml"><!--xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" TODO: user for windows 7 -->
    <Application.Resources>
        <Style x:Key="FocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    	<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#88FFFFFF"/>
    	<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
    	<Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
    		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
    		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
    		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    		<Setter Property="BorderThickness" Value="1"/>
    		<Setter Property="HorizontalContentAlignment" Value="Center"/>
    		<Setter Property="VerticalContentAlignment" Value="Center"/>
    		<Setter Property="Padding" Value="1"/>
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type Button}">
    					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
    						<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    					</Border>
    					<ControlTemplate.Triggers>
    						<Trigger Property="IsDefaulted" Value="true">
    							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
    						</Trigger>
    						<Trigger Property="IsMouseOver" Value="true">
    							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
    							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
    						</Trigger>
    						<Trigger Property="IsPressed" Value="true">
    							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
    							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
    						</Trigger>
    						<Trigger Property="IsEnabled" Value="false">
    							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
    							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
    							<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
    						</Trigger>
    					</ControlTemplate.Triggers>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<SolidColorBrush x:Key="Menu.Static.Background" Color="#66FFFFFF"/>
    	<Style x:Key="MenuStyle" TargetType="{x:Type Menu}">
    		<Setter Property="Background" Value="#66FFFFFF"/>
    		<Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
    		<Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
    		<Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
    		<Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
    		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    		<Setter Property="VerticalContentAlignment" Value="Center"/>
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type Menu}">
    					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
    						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    					</Border>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
    		<GradientStop Color="#66FFFFFF" Offset="0.0"/>
    		<GradientStop Color="#66FFFFFF" Offset="1.0"/>
    	</LinearGradientBrush>
    	<SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
    	<SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#66FFFFFF"/>
    	<SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
    	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    	<SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    	<LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
    		<GradientStop Color="#88FFFFFF" Offset="0.0"/>
    		<GradientStop Color="#88FFFFFF" Offset="1.0"/>
    	</LinearGradientBrush>
    	<SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
    	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#66FFFFFF"/>
    	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
    	<LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
    		<GradientStop Color="#88FFFFFF" Offset="0.0"/>
    		<GradientStop Color="#88FFFFFF" Offset="1.0"/>
    	</LinearGradientBrush>
    	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
    	<SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    	<LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
    		<GradientStop Color="#88FFFFFF" Offset="0.0"/>
    		<GradientStop Color="#88FFFFFF" Offset="1.0"/>
    	</LinearGradientBrush>
    	<SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
    	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#88FFFFFF"/>
    	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
    	<LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
    		<GradientStop Color="#88FFFFFF" Offset="0.0"/>
    		<GradientStop Color="#88FFFFFF" Offset="1.0"/>
    	</LinearGradientBrush>
    	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
    	<SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    	<SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    	<SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#88FFFFFF"/>
    	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
    	<SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
    	<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    		<Setter Property="OverridesDefaultStyle" Value="true"/>
    		<Setter Property="IsTabStop" Value="false"/>
    		<Setter Property="Focusable" Value="false"/>
    		<Setter Property="ClickMode" Value="Press"/>
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type ToggleButton}">
    					<Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}">
    						<Border x:Name="splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
    							<Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{StaticResource ComboBox.Static.Glyph}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
    						</Border>
    					</Border>
    					<ControlTemplate.Triggers>
    						<MultiDataTrigger>
    							<MultiDataTrigger.Conditions>
    								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
    								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
    								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
    								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
    							</MultiDataTrigger.Conditions>
    							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
    							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
    							<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
    							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
    						</MultiDataTrigger>
    						<Trigger Property="IsMouseOver" Value="true">
    							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
    						</Trigger>
    						<MultiDataTrigger>
    							<MultiDataTrigger.Conditions>
    								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
    								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
    							</MultiDataTrigger.Conditions>
    							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
    							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
    						</MultiDataTrigger>
    						<MultiDataTrigger>
    							<MultiDataTrigger.Conditions>
    								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
    								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
    							</MultiDataTrigger.Conditions>
    							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
    							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
    							<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
    							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
    						</MultiDataTrigger>
    						<Trigger Property="IsPressed" Value="true">
    							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
    						</Trigger>
    						<MultiDataTrigger>
    							<MultiDataTrigger.Conditions>
    								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
    								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
    							</MultiDataTrigger.Conditions>
    							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
    							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
    						</MultiDataTrigger>
    						<MultiDataTrigger>
    							<MultiDataTrigger.Conditions>
    								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
    								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
    							</MultiDataTrigger.Conditions>
    							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
    							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
    							<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
    							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
    						</MultiDataTrigger>
    						<Trigger Property="IsEnabled" Value="false">
    							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
    						</Trigger>
    						<MultiDataTrigger>
    							<MultiDataTrigger.Conditions>
    								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
    								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
    							</MultiDataTrigger.Conditions>
    							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
    							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
    						</MultiDataTrigger>
    						<MultiDataTrigger>
    							<MultiDataTrigger.Conditions>
    								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
    								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
    							</MultiDataTrigger.Conditions>
    							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
    							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
    							<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
    							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
    						</MultiDataTrigger>
    					</ControlTemplate.Triggers>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
    		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
    			<Grid.ColumnDefinitions>
    				<ColumnDefinition Width="*"/>
    				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
    			</Grid.ColumnDefinitions>
    			<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
    				<Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
    					<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="#88FFFFFF">
    						<ScrollViewer x:Name="DropDownScrollViewer">
    							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
    								<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
    									<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
    								</Canvas>
    								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    							</Grid>
    						</ScrollViewer>
    					</Border>
    				</Themes:SystemDropShadowChrome>
    			</Popup>
    			<ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
    			<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    		</Grid>
    		<ControlTemplate.Triggers>
    			<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
    				<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
    				<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
    			</Trigger>
    			<Trigger Property="HasItems" Value="false">
    				<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
    			</Trigger>
    			<MultiTrigger>
    				<MultiTrigger.Conditions>
    					<Condition Property="IsGrouping" Value="true"/>
    					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
    				</MultiTrigger.Conditions>
    				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
    			</MultiTrigger>
    			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
    				<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
    				<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
    			</Trigger>
    		</ControlTemplate.Triggers>
    	</ControlTemplate>
    	<SolidColorBrush x:Key="TextBox.Static.Background" Color="#88FFFFFF"/>
    	<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
    		<Setter Property="OverridesDefaultStyle" Value="true"/>
    		<Setter Property="AllowDrop" Value="true"/>
    		<Setter Property="MinWidth" Value="0"/>
    		<Setter Property="MinHeight" Value="0"/>
    		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type TextBox}">
    					<ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
    		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
    			<Grid.ColumnDefinitions>
    				<ColumnDefinition Width="*"/>
    				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
    			</Grid.ColumnDefinitions>
    			<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
    				<Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
    					<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
    						<ScrollViewer x:Name="DropDownScrollViewer">
    							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
    								<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
    									<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
    								</Canvas>
    								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    							</Grid>
    						</ScrollViewer>
    					</Border>
    				</Themes:SystemDropShadowChrome>
    			</Popup>
    			<ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
    			<Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
    				<TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
    			</Border>
    		</Grid>
    		<ControlTemplate.Triggers>
    			<Trigger Property="IsEnabled" Value="false">
    				<Setter Property="Opacity" TargetName="border" Value="0.56"/>
    			</Trigger>
    			<Trigger Property="IsKeyboardFocusWithin" Value="true">
    				<Setter Property="Foreground" Value="Black"/>
    			</Trigger>
    			<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
    				<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
    				<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
    			</Trigger>
    			<Trigger Property="HasItems" Value="false">
    				<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
    			</Trigger>
    			<MultiTrigger>
    				<MultiTrigger.Conditions>
    					<Condition Property="IsGrouping" Value="true"/>
    					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
    				</MultiTrigger.Conditions>
    				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
    			</MultiTrigger>
    			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
    				<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
    				<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
    			</Trigger>
    		</ControlTemplate.Triggers>
    	</ControlTemplate>
    	<Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
    		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    		<Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
    		<Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
    		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    		<Setter Property="BorderThickness" Value="1"/>
    		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    		<Setter Property="Padding" Value="6,3,5,3"/>
    		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    		<Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
    		<Style.Triggers>
    			<Trigger Property="IsEditable" Value="true">
    				<Setter Property="IsTabStop" Value="false"/>
    				<Setter Property="Padding" Value="2"/>
    				<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
    			</Trigger>
    		</Style.Triggers>
    	</Style>
    	<SolidColorBrush x:Key="MenuItem.Highlight.Background" Color="#66FFFFFF"/>
    	<SolidColorBrush x:Key="MenuItem.Highlight.Border" Color="#FF26A0DA"/>
    	<SolidColorBrush x:Key="Menu.Disabled.Foreground" Color="#FF707070"/>
    	<SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Background" Color="#66FFFFFF"/>
    	<SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Border" Color="#21000000"/>
    	<SolidColorBrush x:Key="MenuItem.Selected.Border" Color="#FF26A0DA"/>
    	<SolidColorBrush x:Key="MenuItem.Selected.Background" Color="#66FFFFFF"/>
    	<Geometry x:Key="Checkmark">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>
    	<SolidColorBrush x:Key="Menu.Static.Foreground" Color="#FF212121"/>
    	<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    		<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="22" SnapsToDevicePixels="true">
    			<Grid Margin="-1">
    				<Grid.ColumnDefinitions>
    					<ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
    					<ColumnDefinition Width="13"/>
    					<ColumnDefinition Width="*"/>
    					<ColumnDefinition Width="30"/>
    					<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
    					<ColumnDefinition Width="20"/>
    				</Grid.ColumnDefinitions>
    				<ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
    				<Border x:Name="GlyphPanel" BorderBrush="{StaticResource MenuItem.Selected.Border}" BorderThickness="1" Background="{StaticResource MenuItem.Selected.Background}" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
    					<Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="{StaticResource Menu.Static.Foreground}" FlowDirection="LeftToRight" Height="11" Width="10"/>
    				</Border>
    				<ContentPresenter x:Name="menuHeaderContainer" Grid.Column="2" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
    				<TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
    			</Grid>
    		</Border>
    		<ControlTemplate.Triggers>
    			<Trigger Property="Icon" Value="{x:Null}">
    				<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    			</Trigger>
    			<Trigger Property="IsChecked" Value="True">
    				<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
    				<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    			</Trigger>
    			<Trigger Property="IsHighlighted" Value="True">
    				<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Background}"/>
    				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
    			</Trigger>
    			<Trigger Property="IsEnabled" Value="False">
    				<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
    				<Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
    			</Trigger>
    			<MultiTrigger>
    				<MultiTrigger.Conditions>
    					<Condition Property="IsHighlighted" Value="True"/>
    					<Condition Property="IsEnabled" Value="False"/>
    				</MultiTrigger.Conditions>
    				<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
    				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
    			</MultiTrigger>
    		</ControlTemplate.Triggers>
    	</ControlTemplate>
    	<SolidColorBrush x:Key="Menu.Static.Border" Color="#FF999999"/>
    	<SolidColorBrush x:Key="Menu.Static.Background2" Color="#FFF0F0F0"/>
    	<SolidColorBrush x:Key="Menu.Static.Separator" Color="#FFD7D7D7"/>
    	<Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    	<Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
    		<Setter Property="ClickMode" Value="Hover"/>
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type RepeatButton}">
    					<Border x:Name="templateRoot" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" SnapsToDevicePixels="true">
    						<ContentPresenter HorizontalAlignment="Center" Margin="6" VerticalAlignment="Center"/>
    					</Border>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    	<Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    	<Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
    		<Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
    		<Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type ScrollViewer}">
    					<Grid SnapsToDevicePixels="true">
    						<Grid.ColumnDefinitions>
    							<ColumnDefinition Width="*"/>
    						</Grid.ColumnDefinitions>
    						<Grid.RowDefinitions>
    							<RowDefinition Height="Auto"/>
    							<RowDefinition Height="*"/>
    							<RowDefinition Height="Auto"/>
    						</Grid.RowDefinitions>
    						<Border Grid.Column="0" Grid.Row="1">
    							<ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}"/>
    						</Border>
    						<RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
    							<RepeatButton.Visibility>
    								<MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
    									<Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
    									<Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
    									<Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
    									<Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
    								</MultiBinding>
    							</RepeatButton.Visibility>
    							<Path Data="{StaticResource UpArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
    						</RepeatButton>
    						<RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
    							<RepeatButton.Visibility>
    								<MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
    									<Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
    									<Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
    									<Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
    									<Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
    								</MultiBinding>
    							</RepeatButton.Visibility>
    							<Path Data="{StaticResource DownArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
    						</RepeatButton>
    					</Grid>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    		<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#66FFFFFF" SnapsToDevicePixels="true">
    			<Grid VerticalAlignment="Center">
    				<Grid.ColumnDefinitions>
    					<ColumnDefinition Width="Auto"/>
    					<ColumnDefinition Width="Auto"/>
    				</Grid.ColumnDefinitions>
    				<ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
    				<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
    				<ContentPresenter Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    				<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}">
    					<Border x:Name="SubMenuBorder" BorderBrush="{StaticResource Menu.Static.Border}" BorderThickness="1" Background="{StaticResource Menu.Static.Background2}" Padding="2">
    						<ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
    							<Grid RenderOptions.ClearTypeHint="Enabled">
    								<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
    									<Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
    								</Canvas>
    								<Rectangle Fill="{StaticResource Menu.Static.Separator}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
    								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
    							</Grid>
    						</ScrollViewer>
    					</Border>
    				</Popup>
    			</Grid>
    		</Border>
    		<ControlTemplate.Triggers>
    			<Trigger Property="IsSuspendingPopupAnimation" Value="true">
    				<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
    			</Trigger>
    			<Trigger Property="Icon" Value="{x:Null}">
    				<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    			</Trigger>
    			<Trigger Property="IsChecked" Value="true">
    				<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
    				<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    			</Trigger>
    			<Trigger Property="IsHighlighted" Value="True">
    				<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Background}"/>
    				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
    			</Trigger>
    			<Trigger Property="IsEnabled" Value="False">
    				<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
    				<Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource Menu.Disabled.Foreground}"/>
    			</Trigger>
    			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
    				<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
    				<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
    			</Trigger>
    		</ControlTemplate.Triggers>
    	</ControlTemplate>
    	<ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    		<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
    			<Grid VerticalAlignment="Center">
    				<Grid.ColumnDefinitions>
    					<ColumnDefinition Width="Auto"/>
    					<ColumnDefinition Width="Auto"/>
    				</Grid.ColumnDefinitions>
    				<ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
    				<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{StaticResource Menu.Static.Foreground}" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
    				<ContentPresenter Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    			</Grid>
    		</Border>
    		<ControlTemplate.Triggers>
    			<Trigger Property="Icon" Value="{x:Null}">
    				<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    			</Trigger>
    			<Trigger Property="IsChecked" Value="true">
    				<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
    				<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    			</Trigger>
    			<Trigger Property="IsHighlighted" Value="True">
    				<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Background}"/>
    				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
    			</Trigger>
    			<Trigger Property="IsEnabled" Value="False">
    				<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
    				<Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource Menu.Disabled.Foreground}"/>
    			</Trigger>
    			<MultiTrigger>
    				<MultiTrigger.Conditions>
    					<Condition Property="IsHighlighted" Value="True"/>
    					<Condition Property="IsEnabled" Value="False"/>
    				</MultiTrigger.Conditions>
    				<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
    				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
    			</MultiTrigger>
    		</ControlTemplate.Triggers>
    	</ControlTemplate>
    	<Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
    	<ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    		<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="22" SnapsToDevicePixels="true">
    			<Grid Margin="-1">
    				<Grid.ColumnDefinitions>
    					<ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
    					<ColumnDefinition Width="13"/>
    					<ColumnDefinition Width="*"/>
    					<ColumnDefinition Width="30"/>
    					<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
    					<ColumnDefinition Width="20"/>
    				</Grid.ColumnDefinitions>
    				<ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
    				<Border x:Name="GlyphPanel" BorderBrush="{StaticResource MenuItem.Highlight.Border}" BorderThickness="1" Background="{StaticResource MenuItem.Highlight.Background}" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
    					<Path x:Name="Glyph" Data="{DynamicResource Checkmark}" Fill="{StaticResource Menu.Static.Foreground}" FlowDirection="LeftToRight" Height="11" Width="9"/>
    				</Border>
    				<ContentPresenter Grid.Column="2" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
    				<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
    				<Path x:Name="RightArrow" Grid.Column="5" Data="{StaticResource RightArrow}" Fill="{StaticResource Menu.Static.Foreground}" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
    				<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
    					<Border x:Name="SubMenuBorder" BorderBrush="{StaticResource Menu.Static.Border}" BorderThickness="1" Background="{StaticResource Menu.Static.Background2}" Padding="2">
    						<ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
    							<Grid RenderOptions.ClearTypeHint="Enabled">
    								<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
    									<Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
    								</Canvas>
    								<Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
    								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
    							</Grid>
    						</ScrollViewer>
    					</Border>
    				</Popup>
    			</Grid>
    		</Border>
    		<ControlTemplate.Triggers>
    			<Trigger Property="IsSuspendingPopupAnimation" Value="true">
    				<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
    			</Trigger>
    			<Trigger Property="Icon" Value="{x:Null}">
    				<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    			</Trigger>
    			<Trigger Property="IsChecked" Value="True">
    				<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
    				<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    			</Trigger>
    			<Trigger Property="IsHighlighted" Value="True">
    				<Setter Property="Background" TargetName="templateRoot" Value="Transparent"/>
    				<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
    			</Trigger>
    			<Trigger Property="IsEnabled" Value="False">
    				<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
    				<Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
    				<Setter Property="Fill" TargetName="RightArrow" Value="{StaticResource Menu.Disabled.Foreground}"/>
    			</Trigger>
    			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
    				<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
    				<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
    			</Trigger>
    		</ControlTemplate.Triggers>
    	</ControlTemplate>
    	<Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}">
    		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    		<Setter Property="Background" Value="Transparent"/>
    		<Setter Property="BorderBrush" Value="Transparent"/>
    		<Setter Property="BorderThickness" Value="1"/>
    		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    		<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
    		<Style.Triggers>
    			<Trigger Property="Role" Value="TopLevelHeader">
    				<Setter Property="Background" Value="Transparent"/>
    				<Setter Property="BorderBrush" Value="Transparent"/>
    				<Setter Property="Foreground" Value="{StaticResource Menu.Static.Foreground}"/>
    				<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
    				<Setter Property="Padding" Value="6,0"/>
    			</Trigger>
    			<Trigger Property="Role" Value="TopLevelItem">
    				<Setter Property="Background" Value="{StaticResource Menu.Static.Background}"/>
    				<Setter Property="BorderBrush" Value="{StaticResource Menu.Static.Border}"/>
    				<Setter Property="Foreground" Value="{StaticResource Menu.Static.Foreground}"/>
    				<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
    				<Setter Property="Padding" Value="6,0"/>
    			</Trigger>
    			<Trigger Property="Role" Value="SubmenuHeader">
    				<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
    			</Trigger>
    		</Style.Triggers>
    	</Style>
    </Application.Resources>
</Application>
