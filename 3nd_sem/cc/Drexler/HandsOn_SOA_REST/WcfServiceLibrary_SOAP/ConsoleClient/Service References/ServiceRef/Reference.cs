//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.ServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Customer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConsoleClient.ServiceRef.Order[] CustomerOrdersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ForenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConsoleClient.ServiceRef.Order[] CustomerOrders {
            get {
                return this.CustomerOrdersField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerOrdersField, value) != true)) {
                    this.CustomerOrdersField = value;
                    this.RaisePropertyChanged("CustomerOrders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Forename {
            get {
                return this.ForenameField;
            }
            set {
                if ((object.ReferenceEquals(this.ForenameField, value) != true)) {
                    this.ForenameField = value;
                    this.RaisePropertyChanged("Forename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long OrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((this.OrderIdField.Equals(value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderName {
            get {
                return this.OrderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderNameField, value) != true)) {
                    this.OrderNameField = value;
                    this.RaisePropertyChanged("OrderName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.ICustomerOrderRetrieval")]
    public interface ICustomerOrderRetrieval {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/TestMessage", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/TestMessageResponse")]
        string TestMessage(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/TestMessage", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/TestMessageResponse")]
        System.Threading.Tasks.Task<string> TestMessageAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/GetAllCustomers", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/GetAllCustomersResponse")]
        ConsoleClient.ServiceRef.Customer[] GetAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/GetAllCustomers", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/GetAllCustomersResponse")]
        System.Threading.Tasks.Task<ConsoleClient.ServiceRef.Customer[]> GetAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/AddCustomer", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/AddCustomerResponse")]
        bool AddCustomer(ConsoleClient.ServiceRef.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/AddCustomer", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/AddCustomerResponse")]
        System.Threading.Tasks.Task<bool> AddCustomerAsync(ConsoleClient.ServiceRef.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/DeleteCustomer", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/DeleteCustomerResponse")]
        bool DeleteCustomer(long customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/DeleteCustomer", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/DeleteCustomerResponse")]
        System.Threading.Tasks.Task<bool> DeleteCustomerAsync(long customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/GetOrdersForCustomer", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/GetOrdersForCustomerResponse")]
        ConsoleClient.ServiceRef.Order[] GetOrdersForCustomer(long customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/GetOrdersForCustomer", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/GetOrdersForCustomerResponse")]
        System.Threading.Tasks.Task<ConsoleClient.ServiceRef.Order[]> GetOrdersForCustomerAsync(long customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/AddOrder", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/AddOrderResponse")]
        bool AddOrder(long customerId, ConsoleClient.ServiceRef.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/AddOrder", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/AddOrderResponse")]
        System.Threading.Tasks.Task<bool> AddOrderAsync(long customerId, ConsoleClient.ServiceRef.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/DeleteOrder", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/DeleteOrderResponse")]
        bool DeleteOrder(long customerId, long orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerOrderRetrieval/DeleteOrder", ReplyAction="http://tempuri.org/ICustomerOrderRetrieval/DeleteOrderResponse")]
        System.Threading.Tasks.Task<bool> DeleteOrderAsync(long customerId, long orderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICustomerOrderRetrievalChannel : ConsoleClient.ServiceRef.ICustomerOrderRetrieval, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomerOrderRetrievalClient : System.ServiceModel.ClientBase<ConsoleClient.ServiceRef.ICustomerOrderRetrieval>, ConsoleClient.ServiceRef.ICustomerOrderRetrieval {
        
        public CustomerOrderRetrievalClient() {
        }
        
        public CustomerOrderRetrievalClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CustomerOrderRetrievalClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerOrderRetrievalClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerOrderRetrievalClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TestMessage(int value) {
            return base.Channel.TestMessage(value);
        }
        
        public System.Threading.Tasks.Task<string> TestMessageAsync(int value) {
            return base.Channel.TestMessageAsync(value);
        }
        
        public ConsoleClient.ServiceRef.Customer[] GetAllCustomers() {
            return base.Channel.GetAllCustomers();
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.ServiceRef.Customer[]> GetAllCustomersAsync() {
            return base.Channel.GetAllCustomersAsync();
        }
        
        public bool AddCustomer(ConsoleClient.ServiceRef.Customer customer) {
            return base.Channel.AddCustomer(customer);
        }
        
        public System.Threading.Tasks.Task<bool> AddCustomerAsync(ConsoleClient.ServiceRef.Customer customer) {
            return base.Channel.AddCustomerAsync(customer);
        }
        
        public bool DeleteCustomer(long customerId) {
            return base.Channel.DeleteCustomer(customerId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCustomerAsync(long customerId) {
            return base.Channel.DeleteCustomerAsync(customerId);
        }
        
        public ConsoleClient.ServiceRef.Order[] GetOrdersForCustomer(long customerId) {
            return base.Channel.GetOrdersForCustomer(customerId);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.ServiceRef.Order[]> GetOrdersForCustomerAsync(long customerId) {
            return base.Channel.GetOrdersForCustomerAsync(customerId);
        }
        
        public bool AddOrder(long customerId, ConsoleClient.ServiceRef.Order order) {
            return base.Channel.AddOrder(customerId, order);
        }
        
        public System.Threading.Tasks.Task<bool> AddOrderAsync(long customerId, ConsoleClient.ServiceRef.Order order) {
            return base.Channel.AddOrderAsync(customerId, order);
        }
        
        public bool DeleteOrder(long customerId, long orderId) {
            return base.Channel.DeleteOrder(customerId, orderId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteOrderAsync(long customerId, long orderId) {
            return base.Channel.DeleteOrderAsync(customerId, orderId);
        }
    }
}
