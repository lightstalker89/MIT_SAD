//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarketPlaceClient.MarketPlaceService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MarketPlaceService.IMarketPlaceService")]
    public interface IMarketPlaceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/UploadVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/UploadVirtualMachineResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualAppliance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualMachineInstance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualMachineResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualApplianceResponse))]
        CommonModel.MarketPlaceServiceResponse UploadVirtualMachine(CommonModel.VirtualMachine virtualMachine, byte[] byteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/UploadVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/UploadVirtualMachineResponse")]
        System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> UploadVirtualMachineAsync(CommonModel.VirtualMachine virtualMachine, byte[] byteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/UploadVirtualAppliance", ReplyAction="http://tempuri.org/IMarketPlaceService/UploadVirtualApplianceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualMachineResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualApplianceResponse))]
        CommonModel.MarketPlaceServiceResponse UploadVirtualAppliance(CommonModel.VirtualAppliance appliance, byte[] byteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/UploadVirtualAppliance", ReplyAction="http://tempuri.org/IMarketPlaceService/UploadVirtualApplianceResponse")]
        System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> UploadVirtualApplianceAsync(CommonModel.VirtualAppliance appliance, byte[] byteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/ChangeDescriptionOfVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/ChangeDescriptionOfVirtualMachineResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualAppliance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualMachineInstance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualMachineResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualApplianceResponse))]
        CommonModel.MarketPlaceServiceResponse ChangeDescriptionOfVirtualMachine(CommonModel.VirtualMachine updateVirtualMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/ChangeDescriptionOfVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/ChangeDescriptionOfVirtualMachineResponse")]
        System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> ChangeDescriptionOfVirtualMachineAsync(CommonModel.VirtualMachine updateVirtualMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/ChangeDescriptionOfVirtualAppliance", ReplyAction="http://tempuri.org/IMarketPlaceService/ChangeDescriptionOfVirtualApplianceRespons" +
            "e")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualMachineResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualApplianceResponse))]
        CommonModel.MarketPlaceServiceResponse ChangeDescriptionOfVirtualAppliance(CommonModel.VirtualAppliance updateVirtualAppliance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/ChangeDescriptionOfVirtualAppliance", ReplyAction="http://tempuri.org/IMarketPlaceService/ChangeDescriptionOfVirtualApplianceRespons" +
            "e")]
        System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> ChangeDescriptionOfVirtualApplianceAsync(CommonModel.VirtualAppliance updateVirtualAppliance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/DownloadVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/DownloadVirtualMachineResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualAppliance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualMachineInstance))]
        CommonModel.DownloadVirtualMachineResponse DownloadVirtualMachine(CommonModel.VirtualMachine virtualMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/DownloadVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/DownloadVirtualMachineResponse")]
        System.Threading.Tasks.Task<CommonModel.DownloadVirtualMachineResponse> DownloadVirtualMachineAsync(CommonModel.VirtualMachine virtualMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/DownloadVirtualAppliance", ReplyAction="http://tempuri.org/IMarketPlaceService/DownloadVirtualApplianceResponse")]
        CommonModel.DownloadVirtualApplianceResponse DownloadVirtualAppliance(CommonModel.VirtualAppliance virtualAppliance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/DownloadVirtualAppliance", ReplyAction="http://tempuri.org/IMarketPlaceService/DownloadVirtualApplianceResponse")]
        System.Threading.Tasks.Task<CommonModel.DownloadVirtualApplianceResponse> DownloadVirtualApplianceAsync(CommonModel.VirtualAppliance virtualAppliance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/RateVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/RateVirtualMachineResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualAppliance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualMachineInstance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualMachineResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualApplianceResponse))]
        CommonModel.MarketPlaceServiceResponse RateVirtualMachine(CommonModel.VirtualMachine virtualMachineToRate, byte rate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/RateVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/RateVirtualMachineResponse")]
        System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> RateVirtualMachineAsync(CommonModel.VirtualMachine virtualMachineToRate, byte rate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/CommentVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/CommentVirtualMachineResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualAppliance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualMachineInstance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualMachineResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualApplianceResponse))]
        CommonModel.MarketPlaceServiceResponse CommentVirtualMachine(CommonModel.VirtualMachine virtualMachineToComment, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/CommentVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/CommentVirtualMachineResponse")]
        System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> CommentVirtualMachineAsync(CommonModel.VirtualMachine virtualMachineToComment, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/SearchForSpecificVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/SearchForSpecificVirtualMachineResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualAppliance))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.VirtualMachineInstance))]
        CommonModel.VirtualMachine[] SearchForSpecificVirtualMachine(CommonModel.VirtualMachine specificVirtualMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/SearchForSpecificVirtualMachine", ReplyAction="http://tempuri.org/IMarketPlaceService/SearchForSpecificVirtualMachineResponse")]
        System.Threading.Tasks.Task<CommonModel.VirtualMachine[]> SearchForSpecificVirtualMachineAsync(CommonModel.VirtualMachine specificVirtualMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/SearchForSpecificVirtualAppliance", ReplyAction="http://tempuri.org/IMarketPlaceService/SearchForSpecificVirtualApplianceResponse")]
        CommonModel.VirtualAppliance[] SearchForSpecificVirtualAppliance(CommonModel.VirtualAppliance specificVirtualAppliance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/SearchForSpecificVirtualAppliance", ReplyAction="http://tempuri.org/IMarketPlaceService/SearchForSpecificVirtualApplianceResponse")]
        System.Threading.Tasks.Task<CommonModel.VirtualAppliance[]> SearchForSpecificVirtualApplianceAsync(CommonModel.VirtualAppliance specificVirtualAppliance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/StartInstance", ReplyAction="http://tempuri.org/IMarketPlaceService/StartInstanceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualMachineResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualApplianceResponse))]
        CommonModel.MarketPlaceServiceResponse StartInstance(CommonModel.VirtualMachineInstance virtualMachineInstanceToStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/StartInstance", ReplyAction="http://tempuri.org/IMarketPlaceService/StartInstanceResponse")]
        System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> StartInstanceAsync(CommonModel.VirtualMachineInstance virtualMachineInstanceToStart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/StopInstance", ReplyAction="http://tempuri.org/IMarketPlaceService/StopInstanceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualMachineResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommonModel.DownloadVirtualApplianceResponse))]
        CommonModel.MarketPlaceServiceResponse StopInstance(CommonModel.VirtualMachineInstance virtualMachineInstanceToStop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/StopInstance", ReplyAction="http://tempuri.org/IMarketPlaceService/StopInstanceResponse")]
        System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> StopInstanceAsync(CommonModel.VirtualMachineInstance virtualMachineInstanceToStop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/GetVirtualMachineInstances", ReplyAction="http://tempuri.org/IMarketPlaceService/GetVirtualMachineInstancesResponse")]
        CommonModel.VirtualMachineInstance[] GetVirtualMachineInstances();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/GetVirtualMachineInstances", ReplyAction="http://tempuri.org/IMarketPlaceService/GetVirtualMachineInstancesResponse")]
        System.Threading.Tasks.Task<CommonModel.VirtualMachineInstance[]> GetVirtualMachineInstancesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/GetDummyVirtualMachines", ReplyAction="http://tempuri.org/IMarketPlaceService/GetDummyVirtualMachinesResponse")]
        CommonModel.VirtualMachine[] GetDummyVirtualMachines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/GetDummyVirtualMachines", ReplyAction="http://tempuri.org/IMarketPlaceService/GetDummyVirtualMachinesResponse")]
        System.Threading.Tasks.Task<CommonModel.VirtualMachine[]> GetDummyVirtualMachinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/GetVirtualAppliances", ReplyAction="http://tempuri.org/IMarketPlaceService/GetVirtualAppliancesResponse")]
        CommonModel.VirtualAppliance[] GetVirtualAppliances();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarketPlaceService/GetVirtualAppliances", ReplyAction="http://tempuri.org/IMarketPlaceService/GetVirtualAppliancesResponse")]
        System.Threading.Tasks.Task<CommonModel.VirtualAppliance[]> GetVirtualAppliancesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarketPlaceServiceChannel : MarketPlaceClient.MarketPlaceService.IMarketPlaceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarketPlaceServiceClient : System.ServiceModel.ClientBase<MarketPlaceClient.MarketPlaceService.IMarketPlaceService>, MarketPlaceClient.MarketPlaceService.IMarketPlaceService {
        
        public MarketPlaceServiceClient() {
        }
        
        public MarketPlaceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MarketPlaceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarketPlaceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarketPlaceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CommonModel.MarketPlaceServiceResponse UploadVirtualMachine(CommonModel.VirtualMachine virtualMachine, byte[] byteArray) {
            return base.Channel.UploadVirtualMachine(virtualMachine, byteArray);
        }
        
        public System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> UploadVirtualMachineAsync(CommonModel.VirtualMachine virtualMachine, byte[] byteArray) {
            return base.Channel.UploadVirtualMachineAsync(virtualMachine, byteArray);
        }
        
        public CommonModel.MarketPlaceServiceResponse UploadVirtualAppliance(CommonModel.VirtualAppliance appliance, byte[] byteArray) {
            return base.Channel.UploadVirtualAppliance(appliance, byteArray);
        }
        
        public System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> UploadVirtualApplianceAsync(CommonModel.VirtualAppliance appliance, byte[] byteArray) {
            return base.Channel.UploadVirtualApplianceAsync(appliance, byteArray);
        }
        
        public CommonModel.MarketPlaceServiceResponse ChangeDescriptionOfVirtualMachine(CommonModel.VirtualMachine updateVirtualMachine) {
            return base.Channel.ChangeDescriptionOfVirtualMachine(updateVirtualMachine);
        }
        
        public System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> ChangeDescriptionOfVirtualMachineAsync(CommonModel.VirtualMachine updateVirtualMachine) {
            return base.Channel.ChangeDescriptionOfVirtualMachineAsync(updateVirtualMachine);
        }
        
        public CommonModel.MarketPlaceServiceResponse ChangeDescriptionOfVirtualAppliance(CommonModel.VirtualAppliance updateVirtualAppliance) {
            return base.Channel.ChangeDescriptionOfVirtualAppliance(updateVirtualAppliance);
        }
        
        public System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> ChangeDescriptionOfVirtualApplianceAsync(CommonModel.VirtualAppliance updateVirtualAppliance) {
            return base.Channel.ChangeDescriptionOfVirtualApplianceAsync(updateVirtualAppliance);
        }
        
        public CommonModel.DownloadVirtualMachineResponse DownloadVirtualMachine(CommonModel.VirtualMachine virtualMachine) {
            return base.Channel.DownloadVirtualMachine(virtualMachine);
        }
        
        public System.Threading.Tasks.Task<CommonModel.DownloadVirtualMachineResponse> DownloadVirtualMachineAsync(CommonModel.VirtualMachine virtualMachine) {
            return base.Channel.DownloadVirtualMachineAsync(virtualMachine);
        }
        
        public CommonModel.DownloadVirtualApplianceResponse DownloadVirtualAppliance(CommonModel.VirtualAppliance virtualAppliance) {
            return base.Channel.DownloadVirtualAppliance(virtualAppliance);
        }
        
        public System.Threading.Tasks.Task<CommonModel.DownloadVirtualApplianceResponse> DownloadVirtualApplianceAsync(CommonModel.VirtualAppliance virtualAppliance) {
            return base.Channel.DownloadVirtualApplianceAsync(virtualAppliance);
        }
        
        public CommonModel.MarketPlaceServiceResponse RateVirtualMachine(CommonModel.VirtualMachine virtualMachineToRate, byte rate) {
            return base.Channel.RateVirtualMachine(virtualMachineToRate, rate);
        }
        
        public System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> RateVirtualMachineAsync(CommonModel.VirtualMachine virtualMachineToRate, byte rate) {
            return base.Channel.RateVirtualMachineAsync(virtualMachineToRate, rate);
        }
        
        public CommonModel.MarketPlaceServiceResponse CommentVirtualMachine(CommonModel.VirtualMachine virtualMachineToComment, string comment) {
            return base.Channel.CommentVirtualMachine(virtualMachineToComment, comment);
        }
        
        public System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> CommentVirtualMachineAsync(CommonModel.VirtualMachine virtualMachineToComment, string comment) {
            return base.Channel.CommentVirtualMachineAsync(virtualMachineToComment, comment);
        }
        
        public CommonModel.VirtualMachine[] SearchForSpecificVirtualMachine(CommonModel.VirtualMachine specificVirtualMachine) {
            return base.Channel.SearchForSpecificVirtualMachine(specificVirtualMachine);
        }
        
        public System.Threading.Tasks.Task<CommonModel.VirtualMachine[]> SearchForSpecificVirtualMachineAsync(CommonModel.VirtualMachine specificVirtualMachine) {
            return base.Channel.SearchForSpecificVirtualMachineAsync(specificVirtualMachine);
        }
        
        public CommonModel.VirtualAppliance[] SearchForSpecificVirtualAppliance(CommonModel.VirtualAppliance specificVirtualAppliance) {
            return base.Channel.SearchForSpecificVirtualAppliance(specificVirtualAppliance);
        }
        
        public System.Threading.Tasks.Task<CommonModel.VirtualAppliance[]> SearchForSpecificVirtualApplianceAsync(CommonModel.VirtualAppliance specificVirtualAppliance) {
            return base.Channel.SearchForSpecificVirtualApplianceAsync(specificVirtualAppliance);
        }
        
        public CommonModel.MarketPlaceServiceResponse StartInstance(CommonModel.VirtualMachineInstance virtualMachineInstanceToStart) {
            return base.Channel.StartInstance(virtualMachineInstanceToStart);
        }
        
        public System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> StartInstanceAsync(CommonModel.VirtualMachineInstance virtualMachineInstanceToStart) {
            return base.Channel.StartInstanceAsync(virtualMachineInstanceToStart);
        }
        
        public CommonModel.MarketPlaceServiceResponse StopInstance(CommonModel.VirtualMachineInstance virtualMachineInstanceToStop) {
            return base.Channel.StopInstance(virtualMachineInstanceToStop);
        }
        
        public System.Threading.Tasks.Task<CommonModel.MarketPlaceServiceResponse> StopInstanceAsync(CommonModel.VirtualMachineInstance virtualMachineInstanceToStop) {
            return base.Channel.StopInstanceAsync(virtualMachineInstanceToStop);
        }
        
        public CommonModel.VirtualMachineInstance[] GetVirtualMachineInstances() {
            return base.Channel.GetVirtualMachineInstances();
        }
        
        public System.Threading.Tasks.Task<CommonModel.VirtualMachineInstance[]> GetVirtualMachineInstancesAsync() {
            return base.Channel.GetVirtualMachineInstancesAsync();
        }
        
        public CommonModel.VirtualMachine[] GetDummyVirtualMachines() {
            return base.Channel.GetDummyVirtualMachines();
        }
        
        public System.Threading.Tasks.Task<CommonModel.VirtualMachine[]> GetDummyVirtualMachinesAsync() {
            return base.Channel.GetDummyVirtualMachinesAsync();
        }
        
        public CommonModel.VirtualAppliance[] GetVirtualAppliances() {
            return base.Channel.GetVirtualAppliances();
        }
        
        public System.Threading.Tasks.Task<CommonModel.VirtualAppliance[]> GetVirtualAppliancesAsync() {
            return base.Channel.GetVirtualAppliancesAsync();
        }
    }
}
